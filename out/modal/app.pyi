from ._resolver import Resolver as Resolver
from .client import _Client
from .config import logger as logger
from .object import Handle as Handle, Provider as Provider
from _typeshed import Incomplete
from rich.tree import Tree as Tree
from typing import Dict, Optional

class _App:
    def __init__(self, client: _Client, app_id: str, app_page_url: str, tag_to_object: Optional[Dict[str, Handle]] = ..., tag_to_existing_id: Optional[Dict[str, str]] = ...) -> None: ...
    @property
    def client(self) -> _Client: ...
    @property
    def app_id(self) -> str: ...
    async def disconnect(self) -> None: ...
    async def stop(self) -> None: ...
    def log_url(self): ...
    def __getitem__(self, tag: str) -> Handle: ...
    def __getattr__(self, tag: str) -> Handle: ...
    @staticmethod
    async def init_container(client: _Client, app_id: str) -> _App: ...
    async def create_one_object(self, provider: Provider) -> Handle: ...
    async def deploy(self, name: str, namespace, object_entity: str) -> str: ...

App: Incomplete
AioApp: Incomplete
container_app: Incomplete
aio_container_app: Incomplete

def is_local() -> bool: ...

from collections.abc import Generator
from modal.exception import ExecutionError as ExecutionError
from modal_proto import api_pb2 as api_pb2
from rich.spinner import Spinner as Spinner
from rich.tree import Tree
from typing import List, Optional

class StatusRow:
    def __init__(self, progress: Optional[Tree]) -> None: ...
    def message(self, message) -> None: ...
    def finish(self, message) -> None: ...

class Resolver:
    def __init__(self, output_mgr, client, app_id: Optional[str] = ...) -> None: ...
    @property
    def app_id(self) -> str: ...
    @property
    def client(self): ...
    async def load(self, obj, existing_object_id: Optional[str] = ...): ...
    def objects(self) -> List: ...
    def display(self) -> Generator[None, None, None]: ...
    def add_status_row(self) -> StatusRow: ...
    async def console_write(self, log: api_pb2.TaskLogs): ...
    def console_flush(self) -> None: ...
    def image_snapshot_update(self, image_id: str, task_progress: api_pb2.TaskProgress): ...

from ._blob_utils import BLOB_MAX_PARALLELISM as BLOB_MAX_PARALLELISM, MAX_OBJECT_SIZE_BYTES as MAX_OBJECT_SIZE_BYTES, blob_download as blob_download, blob_upload as blob_upload
from ._call_graph import InputInfo as InputInfo, reconstruct_call_graph as reconstruct_call_graph
from ._function_utils import FunctionInfo as FunctionInfo, LocalFunctionError as LocalFunctionError, load_function_from_module as load_function_from_module
from ._location import parse_cloud_provider as parse_cloud_provider
from ._output import OutputManager as OutputManager
from ._resolver import Resolver as Resolver
from ._serialization import deserialize as deserialize, serialize as serialize
from ._traceback import append_modal_tb as append_modal_tb
from .config import logger as logger
from .exception import ExecutionError as ExecutionError, InvalidError as InvalidError, RemoteError as RemoteError, deprecation_warning as deprecation_warning
from .gpu import GPU_T as GPU_T, display_gpu_config as display_gpu_config, parse_gpu_config as parse_gpu_config
from .mount import _Mount
from .object import Handle as Handle, Provider as Provider
from .proxy import _Proxy
from .retries import Retries as Retries
from .schedule import Schedule as Schedule
from .secret import _Secret
from .shared_volume import _SharedVolume
from _typeshed import Incomplete
from collections.abc import Generator
from google.protobuf.message import Message as Message
from modal_proto import api_pb2
from typing import Any, Callable, Collection, Dict, List, Optional, Union

def exc_with_hints(exc: BaseException): ...

class _OutputValue:
    value: Any
    def __init__(self, value) -> None: ...

class _Invocation:
    stub: Incomplete
    client: Incomplete
    function_call_id: Incomplete
    def __init__(self, stub, function_call_id, client: Incomplete | None = ...) -> None: ...
    @staticmethod
    async def create(function_id, args, kwargs, client): ...
    async def pop_function_call_outputs(self, timeout: Optional[float], clear_on_success: bool): ...
    async def run_function(self): ...
    async def poll_function(self, timeout: Optional[float] = ...): ...
    async def run_generator(self) -> Generator[Incomplete, None, None]: ...

MAP_INVOCATION_CHUNK_SIZE: int

class FunctionStats:
    backlog: int
    num_active_runners: int
    num_total_runners: int
    def __init__(self, backlog, num_active_runners, num_total_runners) -> None: ...

class _FunctionHandle(Handle):
    @property
    def web_url(self) -> str: ...
    @property
    def is_generator(self) -> bool: ...
    async def map(self, *input_iterators, kwargs=..., order_outputs: Incomplete | None = ..., return_exceptions: bool = ...) -> Generator[Incomplete, None, None]: ...
    async def for_each(self, *input_iterators, kwargs=..., ignore_exceptions: bool = ...) -> None: ...
    async def starmap(self, input_iterator, kwargs=..., order_outputs: Incomplete | None = ..., return_exceptions: bool = ...) -> Generator[Incomplete, None, None]: ...
    async def call_function(self, args, kwargs): ...
    async def call_function_nowait(self, args, kwargs): ...
    async def call_generator(self, args, kwargs) -> Generator[Incomplete, None, None]: ...
    def call(self, *args, **kwargs): ...
    def __call__(self, *args, **kwargs): ...
    async def spawn(self, *args, **kwargs) -> Optional['_FunctionCall']: ...
    def get_raw_f(self) -> Callable: ...
    async def get_current_stats(self) -> FunctionStats: ...
    def __get__(self, obj, objtype: Incomplete | None = ...) -> _FunctionHandle: ...

FunctionHandle: Incomplete
AioFunctionHandle: Incomplete

class _Function(Provider[_FunctionHandle]):
    def __init__(self, function_handle: _FunctionHandle, function_info: FunctionInfo, _stub, image: Incomplete | None = ..., secret: Optional[_Secret] = ..., secrets: Collection[_Secret] = ..., schedule: Optional[Schedule] = ..., is_generator: bool = ..., gpu: GPU_T = ..., serialized: bool = ..., base_mounts: Collection[_Mount] = ..., mounts: Collection[_Mount] = ..., shared_volumes: Dict[str, _SharedVolume] = ..., webhook_config: Optional[api_pb2.WebhookConfig] = ..., memory: Optional[int] = ..., proxy: Optional[_Proxy] = ..., retries: Optional[Union[int, Retries]] = ..., timeout: Optional[int] = ..., concurrency_limit: Optional[int] = ..., container_idle_timeout: Optional[int] = ..., cpu: Optional[float] = ..., keep_warm: Union[bool, int, None] = ..., interactive: bool = ..., name: Optional[str] = ..., cloud: Optional[str] = ...) -> None: ...
    def get_panel_items(self) -> List[str]: ...
    @property
    def tag(self): ...
    def get_build_def(self): ...

Function: Incomplete
AioFunction: Incomplete

class _FunctionCall(Handle):
    async def get(self, timeout: Optional[float] = ...): ...
    async def get_call_graph(self) -> List[InputInfo]: ...
    async def cancel(self) -> None: ...

FunctionCall: Incomplete
AioFunctionCall: Incomplete
gather: Incomplete
aio_gather: Incomplete

def current_input_id() -> str: ...

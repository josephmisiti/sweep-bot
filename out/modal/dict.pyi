from ._resolver import Resolver as Resolver
from ._serialization import deserialize as deserialize, serialize as serialize
from .config import logger as logger
from .object import Handle as Handle, Provider as Provider
from _typeshed import Incomplete
from typing import Any

class _DictHandle(Handle):
    async def get(self, key: Any) -> Any: ...
    async def contains(self, key: Any) -> bool: ...
    async def len(self) -> int: ...
    async def __getitem__(self, key: Any) -> Any: ...
    async def update(self, **kwargs) -> None: ...
    async def put(self, key: Any, value: Any) -> None: ...
    async def __setitem__(self, key: Any, value: Any) -> None: ...
    async def pop(self, key: Any) -> Any: ...
    async def __delitem__(self, key: Any) -> Any: ...
    async def __contains__(self, key: Any) -> bool: ...

DictHandle: Incomplete
AioDictHandle: Incomplete

class _Dict(Provider[_DictHandle]):
    def __init__(self, data=...) -> None: ...

Dict: Incomplete
AioDict: Incomplete
